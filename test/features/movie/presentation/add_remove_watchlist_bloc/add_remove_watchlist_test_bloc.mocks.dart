// Mocks generated by Mockito 5.4.6 from annotations
// in ditonton_revamp/test/movie/presentation/bloc/add_remove_watchlist_bloc/add_remove_watchlist_test_bloc.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ditonton_revamp/common/failure.dart' as _i7;
import 'package:ditonton_revamp/feature/movie/domain/entities/movie_detail.dart'
    as _i8;
import 'package:ditonton_revamp/feature/movie/domain/repositories/movie_repository.dart'
    as _i2;
import 'package:ditonton_revamp/feature/movie/domain/usecases/get_watchlist_status.dart'
    as _i3;
import 'package:ditonton_revamp/feature/movie/domain/usecases/remove_watchlist.dart'
    as _i10;
import 'package:ditonton_revamp/feature/movie/domain/usecases/save_watchlist.dart'
    as _i5;
import 'package:fpdart/fpdart.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieRepository_0 extends _i1.SmartFake
    implements _i2.MovieRepository {
  _FakeMovieRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetWatchListStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatus extends _i1.Mock
    implements _i3.GetWatchListStatus {
  MockGetWatchListStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i4.Future<bool> execute(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [id]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [SaveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlist extends _i1.Mock implements _i5.SaveWatchlist {
  MockSaveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i4.Future<_i6.Either<_i7.Failure, String>> execute(_i8.MovieDetail? movie) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [movie]),
            returnValue: _i4.Future<_i6.Either<_i7.Failure, String>>.value(
              _i9.dummyValue<_i6.Either<_i7.Failure, String>>(
                this,
                Invocation.method(#execute, [movie]),
              ),
            ),
          )
          as _i4.Future<_i6.Either<_i7.Failure, String>>);
}

/// A class which mocks [RemoveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlist extends _i1.Mock implements _i10.RemoveWatchlist {
  MockRemoveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i4.Future<_i6.Either<_i7.Failure, String>> execute(_i8.MovieDetail? movie) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [movie]),
            returnValue: _i4.Future<_i6.Either<_i7.Failure, String>>.value(
              _i9.dummyValue<_i6.Either<_i7.Failure, String>>(
                this,
                Invocation.method(#execute, [movie]),
              ),
            ),
          )
          as _i4.Future<_i6.Either<_i7.Failure, String>>);
}
